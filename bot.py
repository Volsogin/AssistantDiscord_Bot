import os
import socket
import asyncio

import discord
import pyotp
from discord import Intents
from discord.ext import tasks
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TOKEN       = os.getenv("DISCORD_TOKEN")
SERVER_IP   = os.getenv("SERVER_IP")
SERVER_PORT = int(os.getenv("SERVER_PORT", 0))
TOTP_SECRET = os.getenv("TOTP_SECRET")  # base32-—Å–µ–∫—Ä–µ—Ç –¥–ª—è Google Authenticator
ALERT_USERS = [int(x) for x in os.getenv("ALERT_USERS", "").split(",") if x]
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))  # —Å–µ–∫—É–Ω–¥
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

intents = Intents.default()
intents.messages = True
bot = discord.Client(intents=intents)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏–π
last_status = None
awaiting_otp = {}      # user_id -> prompt_message
admin_sessions = set() # –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ user_id
admin_menus = {}       # user_id -> menu_message_id


def is_server_online(ip: str, port: int, timeout: float = 5.0) -> bool:
    """–ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å TCP-–∫–æ–Ω–Ω–µ–∫—Ç. True=–æ–Ω–ª–∞–π–Ω, False=–æ—Ñ–ª–∞–π–Ω."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(timeout)
        try:
            sock.connect((ip, port))
            return True
        except:
            return False


@tasks.loop(seconds=CHECK_INTERVAL)
async def check_server():
    global last_status
    status = is_server_online(SERVER_IP, SERVER_PORT)
    if last_status is None:
        last_status = status
        return
    if status != last_status:
        text = (
            f"üîî –í–∞—à Minecraft-—Å–µ—Ä–≤–µ—Ä `{SERVER_IP}:{SERVER_PORT}` "
            + ("–∑–∞–ø—É—â–µ–Ω ‚úÖ" if status else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå")
        )
        for uid in ALERT_USERS:
            try:
                user = await bot.fetch_user(uid)
                await user.send(text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DM {uid}: {e}")
        last_status = status


@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤. –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥‚Ä¶")
    check_server.start()


@bot.event
async def on_message(message: discord.Message):
    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.author.bot or not isinstance(message.channel, discord.DMChannel):
        return

    uid = message.author.id
    text = message.content.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö ‚Äî –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏
    if uid in admin_sessions:
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OTP
    if text == "/admin":
        prompt = await message.channel.send("üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:")
        awaiting_otp[uid] = prompt
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ OTP
    if uid in awaiting_otp:
        prompt_msg = awaiting_otp.pop(uid)
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç–∞
        try:
            await prompt_msg.delete()
        except:
            pass
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        totp = pyotp.TOTP(TOTP_SECRET)
        if totp.verify(text):
            admin_sessions.add(uid)
            menu = await message.channel.send(
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–ª–µ–∫—Å–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á.**\n"
                "üõ† **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
                "üåç ‚Äî —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
                "‚ùå ‚Äî –≤—ã—Ö–æ–¥"
            )
            # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏–∏
            await menu.add_reaction("üåç")
            await menu.add_reaction("‚ùå")
            admin_menus[uid] = menu.id
        else:
            err = await message.channel.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await asyncio.sleep(5)
            try:
                await err.delete()
            except:
                pass
        return


@bot.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞
    if payload.user_id == bot.user.id:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω-—Å–µ—Å—Å–∏–∏
    if payload.user_id not in admin_menus:
        return
    if payload.message_id != admin_menus[payload.user_id]:
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ DM-–∫–∞–Ω–∞–ª
    try:
        user = await bot.fetch_user(payload.user_id)
        channel = user.dm_channel or await user.create_dm()
    except:
        return

    emoji = str(payload.emoji)
    if emoji == "üåç":
        status = is_server_online(SERVER_IP, SERVER_PORT)
        await user.send(
            f"üåê –°–µ—Ä–≤–µ—Ä `{SERVER_IP}:{SERVER_PORT}` "
            + ("–æ–Ω–ª–∞–π–Ω ‚úÖ" if status else "–æ—Ñ–ª–∞–π–Ω ‚ùå")
        )
    elif emoji == "‚ùå":
        # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é
        try:
            msg = await channel.fetch_message(payload.message_id)
            await msg.delete()
        except:
            pass
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        admin_sessions.discard(payload.user_id)
        admin_menus.pop(payload.user_id, None)
        await user.send("‚ñ∂Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


if __name__ == "__main__":
    bot.run(TOKEN)
